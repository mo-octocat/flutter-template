name: |
  Repository Creation: Fulfill
description: |
  Action used to fulfill issue-ops requests around creating GitHub repositories.
inputs:
  authentication:
    description: Method to authenticate client; either 'app' or 'token'
    required: true
  application-id:
    description: Application ID of GitHub App, used if `authentication` is 'app'
    required: false
  application-private-key:
    description: Private SSH key of GitHub App, used if `authentication` is 'app'
    required: false
  github-token:
    description: GitHub token, used if `authentication` is 'token'
    required: false
  team-assign:
    description: GitHub team slug for assigning issue
    required: true
runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate
      id: authenticate
      uses: ./actions/authenticate
      with:
        authentication: ${{ inputs.authentication }}
        application-id: ${{ inputs.application-id }}
        application-private-key: ${{ inputs.application-private-key }}
        github-token: ${{ inputs.github-token }}

    - name: Authorize
      id: authorize
      uses: ./actions/authorize
      with:
        authentication: token
        github-token: ${{ steps.authenticate.outputs.token }}
        team-assign: ${{ inputs.team-assign }}

    - name: Validate
      id: validate
      uses: ./actions/validate
      with:
        authentication: token
        github-token: ${{ steps.authenticate.outputs.token }}
        team-mention: "false"

    - name: Create repository
      id: create-repo
      uses: actions/github-script@v6
      env:
        REPOSITORY_OWNER: ${{ steps.validate.outputs.repository-owner }}
        REPOSITORY_NAME: ${{ steps.validate.outputs.repository-name }}
        REPOSITORY_DESCRIPTION: ${{ steps.validate.outputs.repository-description }}
        REPOSITORY_VISIBILITY: ${{ steps.validate.outputs.repository-visibility }}
        GH_TOKEN: ${{ steps.authenticate.outputs.token }}
      with:
        github-token: ${{ steps.authenticate.outputs.token }}
        script: |
          return await github.rest.repos.createUsingTemplate({
              template_owner: "mo-octocat",
              template_repo: "aws-template",
              name: ${{ steps.validate.outputs.repository-owner }}/${{ steps.validate.outputs.repository-name }},
              description: "${{ steps.validate.outputs.repository-description }}",
              visibility: true,
            })
        # createUsingTemplate
        # gh repo create ${{ steps.validate.outputs.repository-owner }}/${{ steps.validate.outputs.repository-name }} \
        #   --template mo-octocat/aws-template \
        #   --description "${{ steps.validate.outputs.repository-description }}" \
        #   --internal
    - name: Verify create repository results
      uses: actions/github-script@v6
      env:
        ISSUE_AUTHOR: ${{ github.event.issue.user.login }}
        CREATE_REPO_JSON: ${{ steps.create-repo.outputs.result }}
      with:
        script: |
          const response = JSON.parse(process.env.CREATE_REPO_JSON)
          const jsonPretty = JSON.stringify(response, null, 2)
          let message;

          if (response.status == 201) {
            message = `@${process.env.ISSUE_AUTHOR} : Your repository has been created: ${response.data.html_url}`
          } else {
            message = `@${context.actor} : Workflow is either not authorized to create repository or something went wrong.`
            core.setFailed(message)
          }

          const body = `
          **${message}**

          <details>
            <summary>Create Organization Repository Response</summary>

            \`\`\`json
            ${jsonPretty}
            \`\`\`
          </details>
          `

          github.rest.issues.createComment({
            ...context.repo,
            issue_number: context.issue.number,
            body
          })

    - name: Close issue
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.update({
            ...context.repo,
            issue_number: context.issue.number,
            state: "closed",
          })
